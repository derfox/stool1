/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface LoginAttempts {
  attemptedAt: Timestamp;
  createdAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: boolean;
}

export interface Sessions {
  createdAt: Timestamp;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Timestamp;
  userId: number;
}

export interface StoolEntries {
  bristolScale: number;
  createdAt: Generated<Timestamp | null>;
  entryDate: Timestamp;
  frequency: Generated<number>;
  id: Generated<number>;
  notes: string | null;
  timeLogged: Generated<Timestamp | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number | null;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  passwordHash: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<string>;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  loginAttempts: LoginAttempts;
  sessions: Sessions;
  stoolEntries: StoolEntries;
  userPasswords: UserPasswords;
  users: Users;
}




// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.